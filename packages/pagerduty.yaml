# Using a PagerDuty webhook (https://v2.developer.pagerduty.com/v2/docs/webhooks-overview), catch
# every time I get paged.

automation:
  - alias: "PagerDuty Webhook - Triggered Event"
    trigger:
      - platform: webhook
        webhook_id: !secret pagerduty_webhook
    condition:
      - condition: template
        value_template: >
          {# Set the PagerDuty user ID here. #}
          {% set user_id = "PXGT5OA" %}

          {# Set the message type to listen for here. #}
          {% set message_type = "incident.trigger" %}

          {% set message = trigger.json.messages[0] %}

          {% set ns = namespace(assigned_to_me=False) %}
          {% for assignment in message.incident.assignments %}
            {% if assignment.assignee.id == user_id %}
              {% set ns.assigned_to_me = True %}
            {% endif %}
          {% endfor %}

          {{ (message.event == message_type) and ns.assigned_to_me }}
      - condition: state
        entity_id: device_tracker.edith_wifi
        state: 'home'
      - condition: state
        entity_id: input_boolean.vacation_mode
        state: "off"
      - condition: time
        after: '22:00:00'
        before: '07:00:00'
      - condition: state
        entity_id: light.fairy_lights
        state: 'off' # Only run if the lights are already off to avoid changing them.
    action:
      # Partially turn on the fairy lights so I can pick up my laptop to respond to the page.
      - service: light.turn_on
        entity_id: light.fairy_lights
        data:
          transition: 5
          brightness: 64
      # Wait 10 minutes, then turn them off.
      - delay:
          minutes: 10
      - service: light.turn_off
        entity_id: light.fairy_lights
        data:
          transition: 10
