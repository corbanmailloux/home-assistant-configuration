media_player:
  - platform: plex
    remove_unavailable_clients: false
  - platform: universal
    name: Living Room TV
    children:
      - media_player.plex_living_room_roku_tv
      - media_player.65_tcl_roku_tv
    commands:
      volume_up:
        service: script.soundbar_volume_up
      volume_down:
        service: script.soundbar_volume_down
      volume_mute:
        service: script.soundbar_power
      select_source:
        service: media_player.select_source
        data_template:
          entity_id: media_player.65_tcl_roku_tv
          source: "{{ source }}"
    attributes:
      source: media_player.65_tcl_roku_tv|source
      source_list: media_player.65_tcl_roku_tv|source_list

switch:
  - platform: command_line
    switches:
      living_room_tv_power_command_line:
        command_on: "curl -X POST http://10.0.0.248:8060/keypress/PowerOn"
        command_off: "curl -X POST http://10.0.0.248:8060/keypress/PowerOff"
        command_state: 'curl -m 5 -s GET http://10.0.0.248:8060/query/device-info | grep power-mode | sed -e "s:<power-mode>DisplayOff</power-mode>:OFF:" -e "s:<power-mode>PowerOn</power-mode>:ON:"'
        value_template: '{{ value == "ON" }}'
  - platform: template
    switches:
      living_room_tv_power:
        value_template: "{{ is_state('switch.living_room_tv_power_command_line', 'on') }}"
        turn_on:
          - service: wake_on_lan.send_magic_packet
            data:
              mac: !secret living_room_tv_mac
          - service: switch.turn_on
            data:
              entity_id: switch.living_room_tv_power_command_line
        turn_off:
          - service: switch.turn_off
            entity_id: switch.living_room_tv_power_command_line

      living_room_soundbar_power:
        # On this soundbar, volume down is ignored if the soundbar is off, and volume up turns it on.
        # Using this, we can build sequences that will always turn the soundbar on and off, regardless
        # of its starting state, and leave it at its initial volume level.
        value_template: "false" # assumed_state, set below, because we can't tell if it's on or off.
        turn_on:
          - service: switch.turn_on
            entity_id: switch.soundbar_volume_down
          - delay:
              milliseconds: 200
          - service: switch.turn_on
            entity_id: switch.soundbar_volume_up
        turn_off:
          # First, ensure it's on.
          - service: switch.turn_on
            entity_id: switch.soundbar_volume_down
          - delay:
              milliseconds: 200
          - service: switch.turn_on
            entity_id: switch.soundbar_volume_up
          # It takes a bit after turning on before the soundbar will turn back off.
          - delay:
              seconds: 1
          - service: switch.turn_on
            entity_id: switch.soundbar_power

cover:
  - platform: template
    covers:
      living_room_soundbar_volume:
        friendly_name: "Soundbar Volume"
        position_template: "50"
        open_cover:
          service: script.soundbar_volume_up
        close_cover:
          service: script.soundbar_volume_down

rest_command:
  # https://sdkdocs.roku.com/display/sdkdoc/External+Control+API#ExternalControlAPI-KeypressKeyValues
  living_room_roku_keypress:
    url: "http://10.0.0.248:8060/keypress/{{button}}"
    method: post

script:
  # Script wrappers for the Roku controls.
  roku_play_pause:
    sequence:
      - service: rest_command.living_room_roku_keypress
        data:
          button: Play
  roku_replay:
    sequence:
      - service: rest_command.living_room_roku_keypress
        data:
          button: InstantReplay
  roku_back:
    sequence:
      - service: rest_command.living_room_roku_keypress
        data:
          button: Back

  # esphome autoconfigures switches for these. Wrap them in scripts so they appear as buttons in the front end.
  soundbar_volume_up:
    sequence:
      - service: switch.turn_on
        entity_id: switch.soundbar_volume_up
  soundbar_volume_down:
    sequence:
      - service: switch.turn_on
        entity_id: switch.soundbar_volume_down
  soundbar_power:
    sequence:
      - service: switch.turn_on
        entity_id: switch.soundbar_power

  # "Scenes"
  living_room_dinner_mode:
    sequence:
      - service: scene.turn_on
        entity_id: scene.dinner_mode
      - service: script.living_room_tv_server_soundbar_on

  living_room_movie_mode:
    sequence:
      - service: scene.turn_on
        entity_id: scene.movie_mode
      - service: script.living_room_tv_server_soundbar_on

  living_room_game_mode:
    sequence:
      - service: scene.turn_on
        entity_id: scene.movie_mode # At least until I make a game mode scene.
      - service: script.living_room_tv_server_soundbar_on
      - delay: 00:00:02
      - service: media_player.select_source
        data:
          entity_id: media_player.65_tcl_roku_tv
          source: Obama
      - delay: 00:00:03 # Try a second time in case
      - service: media_player.select_source
        data:
          entity_id: media_player.65_tcl_roku_tv
          source: Obama

  # Other
  living_room_tv_server_soundbar_on:
    sequence:
      - service: switch.turn_on
        entity_id:
          - switch.obama # Turn on the server, in case it was off.
          - switch.living_room_tv_power # Same with the TV.
          - switch.living_room_soundbar_power # And the soundbar.

  start_plex_on_tv:
    sequence:
      - service: switch.turn_on
        entity_id: switch.obama
      - service: media_player.select_source
        data:
          entity_id: media_player.65_tcl_roku_tv
          source: "Plex - Stream Free TV & Movies"

automation:
  - alias: Turn on the backlight when the TV turns on
    trigger:
      - platform: state
        entity_id: switch.living_room_tv_power
        from: "off"
        to: "on"
    condition:
      - condition: state
        entity_id: input_select.backlight_mode
        state: "Media control"
    action:
      - service: light.turn_on
        entity_id: light.living_room_tv_backlight
        data:
          transition: 5
          brightness: 200
          rgb_color: [255, 214, 170]
  - alias: Turn off the backlight when the TV turns off
    trigger:
      - platform: state
        entity_id: switch.living_room_tv_power
        from: "on"
        to: "off"
    condition:
      - condition: state
        entity_id: input_select.backlight_mode
        state: "Media control"
    action:
      - service: light.turn_off
        entity_id: light.living_room_tv_backlight
        data:
          transition: 5
  - alias: Turn on the server when the living room TV switches to Plex or Obama
    trigger:
      - platform: template
        value_template: >
          {{ is_state_attr('media_player.65_tcl_roku_tv', 'source', 'Plex - Stream Free TV & Movies') or is_state_attr('media_player.65_tcl_roku_tv', 'source', 'Obama') }}
    condition:
      - condition: state
        entity_id: switch.obama
        state: "off"
    action:
      - service: switch.turn_on
        entity_id: switch.obama
  - alias: Send play/pause to Chromecast when selected
    trigger:
      - platform: state
        entity_id: binary_sensor.roku_remote_play_pause_button
        to: "on"
    condition:
      - condition: template
        value_template: >
          {{ is_state_attr('media_player.65_tcl_roku_tv', 'source', 'Chromecast') }}
    action:
      - service: media_player.media_play_pause
        data:
          entity_id: media_player.living_room_chromecast
  - alias: Switch the TV to the Chromecast when someone starts casting
    trigger:
      - platform: state
        entity_id: media_player.living_room_chromecast
        to: "idle"
      - platform: state
        entity_id: media_player.living_room_chromecast
        to: "playing"
    condition:
      - condition: template
        value_template: >
          {{ not is_state_attr('media_player.65_tcl_roku_tv', 'source', 'Chromecast') }}
    action:
      - service: switch.turn_on
        entity_id:
          - switch.living_room_tv_power # No action if it's off.
          - switch.living_room_soundbar_power # No action if it's off.
      - service: media_player.select_source
        data:
          entity_id: media_player.65_tcl_roku_tv
          source: Chromecast
      - delay: 00:00:03 # Try a second time in case
      # TODO: Can you add a condition as a step in a script, so it stops here if the first attempt worked?
      - service: media_player.select_source
        data:
          entity_id: media_player.65_tcl_roku_tv
          source: Chromecast

homeassistant:
  customize:
    switch.living_room_tv_power:
      friendly_name: Living Room TV
      icon: mdi:television
    script.living_room_dinner_mode:
      friendly_name: Dinner Mode
      icon: mdi:silverware
    script.living_room_game_mode:
      friendly_name: Game Mode
      icon: mdi:google-controller
    script.living_room_movie_mode:
      friendly_name: Movie Mode
      icon: mdi:movie
    script.roku_play_pause:
      friendly_name: "Play/Pause"
      icon: mdi:play-pause
    script.roku_replay:
      friendly_name: "Replay"
      icon: mdi:replay
    script.roku_back:
      friendly_name: "Back"
      icon: mdi:keyboard-backspace
    switch.living_room_soundbar_power:
      friendly_name: Soundbar Power
      icon: mdi:surround-sound
      assumed_state: true # Enable the separate buttons for on and off
    cover.living_room_soundbar_volume:
      icon: mdi:volume-medium
