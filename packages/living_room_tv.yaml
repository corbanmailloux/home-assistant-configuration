media_player:
  - platform: plex
    entity_namespace: 'plex'
    include_non_clients: true
    remove_unavailable_clients: false
  - platform: universal
    name: Living Room TV
    children:
      - media_player.plex_living_room_roku_tv
      - media_player.65_tcl_roku_tv
    commands:
      volume_up:
        service: script.soundbar_volume_up
      volume_down:
        service: script.soundbar_volume_down
      volume_mute:
        service: script.soundbar_power
      select_source:
        service: media_player.select_source
        data_template:
          entity_id: media_player.65_tcl_roku_tv
          source: '{{ source }}'
    attributes:
      source: media_player.65_tcl_roku_tv|source
      source_list: media_player.65_tcl_roku_tv|source_list

switch:
  - platform: command_line
    switches:
      living_room_tv_power_command_line:
        command_on: 'curl -X POST http://10.0.0.248:8060/keypress/PowerOn'
        command_off: 'curl -X POST http://10.0.0.248:8060/keypress/PowerOff'
        command_state: 'curl -m 5 -s GET http://10.0.0.248:8060/query/device-info | grep power-mode | sed -e "s:<power-mode>DisplayOff</power-mode>:OFF:" -e "s:<power-mode>PowerOn</power-mode>:ON:"'
        value_template: '{{ value == "ON" }}'
  - platform: template
    switches:
      living_room_tv_power:
        value_template: "{{ is_state('switch.living_room_tv_power_command_line', 'on') }}"
        turn_on:
          - service: script.turn_on
            entity_id: script.living_room_tv_power_on
        turn_off:
          - service: switch.turn_off
            entity_id: switch.living_room_tv_power_command_line
      living_room_soundbar_power:
        value_template: "false" # assumed_state, set below, because we can't tell if it's on or off.
        turn_on:
          - service: script.turn_on
            entity_id: script.soundbar_power_on
        turn_off:
          - service: script.turn_on
            entity_id: script.soundbar_power_off

cover:
  - platform: template
    covers:
      living_room_soundbar_volume:
        friendly_name: "Soundbar Volume"
        position_template: "50"
        open_cover:
          service: script.soundbar_volume_up
        close_cover:
          service: script.soundbar_volume_down

group:
  living_room_tv_control:
    name: "Living Room TV"
    control: hidden
    entities:
      - switch.living_room_tv_power
      - switch.obama
      - switch.living_room_soundbar_power
      - cover.living_room_soundbar_volume
      - script.roku_play_pause
      - script.roku_replay
      - script.roku_back
      - script.living_room_movie_mode
      - script.living_room_game_mode

rest_command:
  # https://sdkdocs.roku.com/display/sdkdoc/External+Control+API#ExternalControlAPI-KeypressKeyValues
  living_room_roku_keypress:
    url: 'http://10.0.0.248:8060/keypress/{{button}}'
    method: post

script:
  # Script wrappers for the Roku controls.
  roku_play_pause:
    sequence:
      - service: rest_command.living_room_roku_keypress
        data:
          button: Play
  roku_replay:
    sequence:
      - service: rest_command.living_room_roku_keypress
        data:
          button: InstantReplay
  roku_back:
    sequence:
      - service: rest_command.living_room_roku_keypress
        data:
          button: Back
  # Other
  living_room_tv_power_on:
    sequence:
      - service: wake_on_lan.send_magic_packet
        data:
          mac: !secret living_room_tv_mac
      - service: switch.turn_on
        data:
          entity_id: switch.living_room_tv_power_command_line
  living_room_game_mode:
    sequence:
      - service: switch.turn_on
        entity_id:
          - switch.obama # Turn on the server, in case it was off.
          - switch.living_room_tv_power # Same with the TV.
          - switch.living_room_soundbar_power # And the soundbar.
          - switch.living_room_lamp_near_tv # Give some lighting. # TODO: Set the backlight as well?
      - delay: 00:00:02
      - service: media_player.select_source
        data:
          entity_id: media_player.65_tcl_roku_tv
          source: Obama
      - delay: 00:00:03 # Try a second time in case
      - service: media_player.select_source
        data:
          entity_id: media_player.65_tcl_roku_tv
          source: Obama
  living_room_movie_mode:
    sequence:
      - service: switch.turn_on
        entity_id:
          - switch.obama # Turn on the server, in case it was off.
          - switch.living_room_tv_power # Same with the TV.
          - switch.living_room_soundbar_power # And the soundbar.
      - service: scene.turn_on
        entity_id: scene.movie_mode
      # Leaving these commented out for now because we use it for both Netflix and Plex
      # - delay: 00:00:02
      # - service: media_player.select_source
      #   data:
      #     entity_id: media_player.65_tcl_roku_tv
      #     source: Netflix
      # - delay: 00:00:03 # Try a second time in case
      # - service: media_player.select_source
      #   data:
      #     entity_id: media_player.65_tcl_roku_tv
      #     source: Plex

  # esphome autoconfigures switches for these. Wrap them in scripts so they appear as a button
  # in the front end.
  soundbar_volume_up:
    sequence:
      - service: switch.turn_on
        entity_id: switch.soundbar_volume_up
  soundbar_volume_down:
    sequence:
      - service: switch.turn_on
        entity_id: switch.soundbar_volume_down
  soundbar_power:
    sequence:
      - service: switch.turn_on
        entity_id: switch.soundbar_power

  # On this soundbar, volume down is ignored if the soundbar is off, and volume up turns it on.
  # Using this, we can build sequences that will always turn the soundbar on and off, regardless
  # of its starting state, and leave it at its initial volume level.
  soundbar_power_on:
    sequence:
      - service: switch.turn_on
        entity_id: switch.soundbar_volume_down
      - delay:
          milliseconds: 200
      - service: switch.turn_on
        entity_id: switch.soundbar_volume_up
  soundbar_power_off:
    sequence:
      # First, ensure it's on.
      - service: switch.turn_on
        entity_id: switch.soundbar_volume_down
      - delay:
          milliseconds: 200
      - service: switch.turn_on
        entity_id: switch.soundbar_volume_up
      # It takes a bit after turning on before the soundbar will turn back off.
      - delay:
          seconds: 1
      - service: switch.turn_on
        entity_id: switch.soundbar_power

scene:
  - name: Movie Mode
    entities:
      light.entry_lamp:
        state: on
        transition: 2
        brightness: 90
      switch.living_room_lamp_near_tv:
        state: off
      switch.living_room_couch:
        state: off
      light.living_room_tv_backlight:
        state: on
        transition: 5
        brightness: 200
        rgb_color: [255, 214, 170]

homeassistant:
  customize:
    switch.living_room_tv_power:
      friendly_name: Living Room TV
      icon: mdi:television
    script.living_room_game_mode:
      friendly_name: Game Mode
      icon: mdi:google-controller
    script.living_room_movie_mode:
      friendly_name: Movie Mode
      icon: mdi:movie
    script.roku_play_pause:
      friendly_name: "Play/Pause"
      icon: mdi:play-pause
    script.roku_replay:
      friendly_name: "Replay"
      icon: mdi:replay
    script.roku_back:
      friendly_name: "Back"
      icon: mdi:keyboard-backspace
    switch.living_room_soundbar_power:
      friendly_name: Soundbar Power
      icon: mdi:surround-sound
      assumed_state: true # Enable the separate buttons for on and off
    cover.living_room_soundbar_volume:
      icon: mdi:volume-medium
