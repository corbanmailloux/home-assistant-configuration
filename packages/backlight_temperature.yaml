# Set the light based on the temperature

automation:
  - alias: "Set TV backlight based on temperature"
    initial_state: false
    trigger:
      - platform: state
        entity_id: sensor.living_room_temperature
    condition:
      - condition: state
        entity_id: light.living_room_tv_backlight
        state: "on"
    action: 
      - service: script.set_color
        data_template:
          id: light.living_room_tv_backlight
          brightness: 255
          transition: 5
          colors: >-
            {% macro map(value, in_min, in_max, out_min, out_max) -%}
              {{ ((value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min) }}
            {%- endmacro %}

            {% macro map_color(value, in_min, in_max, start_color, end_color) -%}
              {% if value < in_min %}
                {% set value = in_min %}
              {% endif %}
              {% if value > in_max %}
                {% set value = in_max %}
              {% endif %}

              {{- map(value, in_min, in_max, start_color[0], end_color[0]) | int -}},
              {{- map(value, in_min, in_max, start_color[1], end_color[1]) | int -}},
              {{- map(value, in_min, in_max, start_color[2], end_color[2]) | int -}}
            {%- endmacro %}

            {% macro pick_color(value) -%}
              {% set temp_low = states.input_slider.temperature_low.state | int %}
              {% set temp_high = states.input_slider.temperature_high.state | int %}

              {% set color_low = [0, 0, 255] %}
              {% set color_mid = [255, 255, 255] %}
              {% set color_high = [255, 0, 0] %}

              {% set temp_mid = ((temp_low + temp_high) / 2) %}
              {% if value < temp_mid %}
                {{ map_color(value, temp_low, temp_mid, color_low, color_mid) }}
              {% else %}
                {{ map_color(value, temp_mid, temp_high, color_mid, color_high) }}
              {% endif %}
            {%- endmacro %}

            {{ pick_color(states.sensor.living_room_temperature.state | float) }}


input_slider:
  temperature_low:
    name: Cold Temperature
    initial: 64
    min: 55
    max: 80
    step: 1
  temperature_high:
    name: Hot Temperature
    initial: 75
    min: 55
    max: 80
    step: 1


script:
  set_color:
    sequence:
      - service: light.turn_on
        data_template:
          entity_id: '{{ id }}'
          rgb_color: ["{{ colors.split(',')[0]|int }}", "{{ colors.split(',')[1]|int }}", "{{ colors.split(',')[2]|int }}"]
          brightness: "{{ brightness }}"
          transition: "{{ transition }}"


group:
  temperature_brightness:
    name: "Temperature-Controlled Brightness"
    control: hidden
    entities:
      - automation.set_tv_backlight_based_on_temperature
      - input_slider.temperature_low
      - input_slider.temperature_high
